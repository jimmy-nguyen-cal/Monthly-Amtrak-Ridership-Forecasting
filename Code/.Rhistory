ar1.df <- as.data.frame(accuracy(ar1.pred, valid.ts))
ar1.df[,1:6] %>%
pander(style = "grid", caption = "AR1 Model")
# Optimal ARIMA Model
autoarima.df <- as.data.frame(accuracy(autoarima.pred, valid.ts))
autoarima.df[,1:6] %>%
pander(style = "grid", caption = "Optimal ARIMA Model")
# Seasonality naive forecasts
snaive.df <- as.data.frame(accuracy(snaive.pred, valid.ts))
snaive.df[,1:6] %>%
pander(style = "grid", caption = "Seasonal Naive Model")
# Validation Data
nValid <- 12
# number of training data
nTrain <- length(df) - nValid
# time window for training data
train.ts <- window(df, start = c(1991, 1), end = c(1991, nTrain))
# time window for validation data
valid.ts <- window(df, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))
#automated selection - optimal model
optimal <- ets(train.ts, restrict = FALSE, allow.multiplicative.trend = TRUE)
optimal
# Optimal Forecasts
op.pred <- forecast(optimal, h = nValid, level = 0)
# training data - then validation forecasts
plot(op.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n",
main = "Optimal Model from Automated Model Selections", flty = 2)
# labels
axis(1, at = seq(1991, 2013, 1), labels = format(seq(1991, 2013, 1)))
# training data - forecasts
lines(op.pred$fitted, lwd = 2, col = "darkslategray2")
# validation data
lines(valid.ts)
# legend
legend(1991,2800000, c("Training and Validation Data","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("black", 'darkslategray2', 'blue'))
# the final model selected was the optimal exponential model
final_model <- optimal
#forecasts for June to August 2013 (3 months ahead)
final.pred <- forecast(final_model, h = nValid + 3)
# plot of predictions
autoplot(final.pred)
# the final model selected was the optimal exponential model
final_model <- optimal
#forecasts for June to August 2013 (3 months ahead)
final.pred <- forecast(final_model, h = nValid + 3)
# plot of predictions
plot(final.pred)
# the final model selected was the optimal exponential model
final_model <- optimal
#forecasts for June to August 2013 (3 months ahead)
final.pred <- forecast(final_model, h = nValid + 3)
# plot of predictions
plot(final.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Final Model with Forecasts on Future Data")
# labels
axis(1, at = seq(1991, 2013.9, 1), labels = format(seq(1991, 2013.9, 1))
# the final model selected was the optimal exponential model
final_model <- optimal
#forecasts for June to August 2013 (3 months ahead)
final.pred <- forecast(final_model, h = nValid + 3)
# plot of predictions
plot(final.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Final Model with Forecasts on Future Data")
# labels
axis(1, at = seq(1991, 2013.9, 1), labels = format(seq(1991, 2013.9, 1)))
# the final model selected was the optimal exponential model
final_model <- optimal
#forecasts for June to August 2013 (3 months ahead)
final.pred <- forecast(final_model, h = nValid + 3)
# plot of predictions
plot(final.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Final Model with Forecasts on Future Data")
# labels
axis(1, at = seq(1991, 2014, 1), labels = format(seq(1991, 2014, 1)))
# the final model selected was the optimal exponential model
final_model <- optimal
#forecasts for June to August 2013 (3 months ahead)
final.pred <- forecast(final_model, h = nValid + 3)
# plot of predictions
plot(final.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Final Model with Forecasts on Future Data")
# labels
axis(1, at = seq(1991, 2014, 1), labels = format(seq(1991, 2014, 1)))
# the final model selected was the optimal exponential model
final_model <- optimal
#forecasts for June to August 2013 (3 months ahead)
final.pred <- forecast(final_model, h = nValid + 3)
# plot of predictions
plot(final.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Final Model with Forecasts on Future Data")
# labels
axis(1, at = seq(1991, 2014, 1), labels = format(seq(1991, 2014, 1)))
final.pred
final.pred[,1]
final.pred[,1:1]
as.data.frame(final.pred)
as.data.frame(final.pred)[1]
as.data.frame(final.pred)[15,1]
as.data.frame(final.pred)[4:5,1]
as.data.frame(final.pred)[4:5,]
as.data.frame(final.pred)[10:15,]
as.data.frame(final.pred)[12:15,]
as.data.frame(final.pred)[12:15,1]
as.data.frame(final.pred)[12:15,2]
as.data.frame(final.pred)[12:15]
as.data.frame(final.pred)[12:15,]
final.pred[12:15,]
as.data.frame(final.pred)[12:15,]
# final forecasts for June to August 2013
final_forecasts<- as.data.frame(final.pred)[13:15,1]
# final forecasts for June to August 2013
final_forecasts<- as.data.frame(final.pred)[13:15,1]
final_forecasts
# final forecasts for June to August 2013
final_forecasts<- as.data.frame(final.pred)[13:15,]
final_forecasts
# final forecasts for June to August 2013
final_forecasts<- as.data.frame(final.pred)[13:15,]
final_forecasts %>%
pander(style = "grid", caption = "June to August 2013 - Ridership Forecasts")
# final forecasts for June to August 2013
final_forecasts<- as.data.frame(final.pred)[13:15,]
final_forecasts %>%
pander(style = "grid",
caption = "June to August 2013 - Ridership Forecasts")
#auto arima
# Validation Data
nValid <- 12
# number of training data
nTrain <- length(df) - nValid
# time window for training data
train.ts <- window(df, start = c(1991, 1), end = c(1991, nTrain))
# time window for validation data
valid.ts <- window(df, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))
# autoselection for optimal arima parameters
autoarima <- auto.arima(train.ts)
#forecast ar1 model
autoarima.pred <- forecast(autoarima, h = nValid)
# Plot training data along with validation forecasts
plot(autoarima.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Optimal ARIMA Model")
# labels
axis(1, at = seq(1991, 2013.9, 1), labels = format(seq(1991, 2013.9, 1)))
# validation data
lines(valid.ts)
# training model forecasts
lines(autoarima.pred$fitted, lwd = 2, col = "darkslategray2")
# legend
legend(1991,2800000, c("Training and Validation Data","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("black", 'darkslategray2', 'dodgerblue4'))
#summary
summary(autoarima)
library(astsa)
library(readr)
library(forecast)
library(zoo)
library(xts)
library(pander)
library(tidyverse)
library(tseries)
library(lubridate)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Load the data set from CSV file
df <- read_csv("../Data/Amtrak Ridership Data.csv")
# Rename columns
names(df)[1] <- 'Dates'
names(df[2]) <- 'Number_of_Passengers'
# First 12 months in 1991
head(df, n = 12) %>%
pander(style = "grid", caption = "First 12 Months - 1991")
# convert to time series object
df<- ts(data = df[,2], start = c(1991,1),
end = c(2013,5), frequency = 12)
print("Starting Year and Month: ")
start(df)
print("Final Year and Month: ")
end(df)
# Make a quick time-series plot
plot(df, xlab = "Year", ylab = "Number of Passengers",
bty = "l", col = "grey41",
main = "Amtrak Ridership, 1991-2013")
#Inspect ACF and PACF
acf_pcf <-acf2(df)
acf_pcf
# Trailing Average
ma.trailing <- rollmean(df, k = 12, align = "right")
# Centered-Average
ma.centered <- ma(df, order = 12)
# Original Data
plot(df, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", col = 'grey41',
main = "Centered vs. Trailing Moving Average")
# Labels
axis(1, at = seq(1991, 2013.50, 1), labels = format(seq(1991, 2013.50, 1)))
# Centered average lines
lines(ma.centered, lwd = 2, col = 'red')
# trailing moving average
lines(ma.trailing, lwd = 2, lty = 2, col ='blue')
# legend
legend(1991,2800000, c("Ridership","Centered Moving Average",
"Trailing Moving Average"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("grey41", 'red', 'blue'))
# Validation Data
nValid <- 12
# number of training data
nTrain <- length(df) - nValid
# time window for training data
train.ts <- window(df, start = c(1991, 1), end = c(1991, nTrain))
# time window for validation data
valid.ts <- window(df, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))
# trailing moving average
ma.trailing <- rollmean(train.ts, k = 12, align = "right")
# last trailing moving average
last.ma <- tail(ma.trailing, 1)
# prediction by trailing moving average
ma.trailing.pred <- ts(rep(last.ma, nValid), start = c(1991, nTrain + 1),
end = c(1991, nTrain + nValid), freq = 12)
# plot training data
plot(train.ts, ylim = c(1300000, 2800000), ylab = "Ridership",
xlab = "Time", bty="l", xaxt = "n", col = 'grey41',
xlim = c(1991,2013.50), main = "Forecasting with Trailing Moving Average")
# labels
axis(1, at = seq(1991, 2013.50, 1), labels = format(seq(1991, 2013.50, 1)))
# training model
lines(ma.trailing, lwd = 2, col = "blue")
# validation data
lines(valid.ts, col = 'grey41')
# predictions on validation
lines(ma.trailing.pred, lwd = 2, col = "blue", lty = 2)
# legend
legend(1991,2800000, c("Original Ridership","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("grey41", 'blue', 'blue'))
# Running the Dickey-Fuller Test on the original data without any pre-processing
adf.test(df)
# decompose the components of the data set
d1 <-decompose(df, type = c("additive","multiplicative"))
plot(d1)
par(mfrow=c(2,2))
# Original
plot(df, xlab = "Year", ylab = "Number of Passengers",
main = "Original Amtrak Ridership, 1991-2013", col = 'grey41')
# lag-12 difference
plot(diff(df, lag = 12), xlab = "Year", ylab = "Lag-12",
main = "Lag-12 Difference", col = 'blue')
# lag-1 difference
plot(diff(df), xlab = "Year", ylab = "Lag-1",
main = "Lag-1 Difference", col = 'red')
# Double Differencing
plot(diff(diff(df, s = 12)), xlab = "Year", ylab = "Lag-12, then Lag-1",
main = "Twice-Differenced (Lag-12, Lag-1)", col = 1)
# remove trend and seasonality by doing double-differencing
diff_twice <- diff(diff(df, lag = 12), lag = 1)
# Number of validation data
nValid <- 36
# number of training data
nTrain <- length(diff_twice) - nValid
# specified time window for training data
train.ts <- window(diff_twice, start = c(1992, 2), end = c(1992, nTrain + 1))
# specified time window for validation data
valid.ts <- window(diff_twice, start = c(1992, nTrain + 2),
end = c(1992, nTrain + 1 + nValid))
# Additive, no trend, no seasonality model using a constant (learning rate) of 0.2
ses <- ets(train.ts, model = "ANN", alpha = 0.2)
# make predictions using model
ses.pred <- forecast(ses, h = nValid, level = 0)
# training data then validation forecasts
plot(ses.pred, ylab = "Ridership (Twice-Differenced)", xlab = "Time",
bty = "l", xaxt = "n", xlim = c(1991,2013.50), main = "Simple Exponential Smoother on
Double Differenced Data", flty = 2)
# labels
axis(1, at = seq(1991, 2013, 1), labels = format(seq(1991, 2013, 1)))
# training model - predictions
lines(ses.pred$fitted, lwd = 2, col = "darkslategray2")
# validaiton data
lines(valid.ts)
# legend
legend(1994,230000, c("Original Ridership","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("black", 'darkslategray2', 'blue'))
# Validation Data
nValid <- 12
# number of training data
nTrain <- length(df) - nValid
# time window for training data
train.ts <- window(df, start = c(1991, 1), end = c(1991, nTrain))
# time window for validation data
valid.ts <- window(df, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))
# multiplicative error with additive trend and additive seasonality model
maa <- ets(train.ts, model = "MAA")
# Forecasts
maa.pred <- forecast(maa, h = nValid, level = 0)
# training data and validation data - forecasts
plot(maa.pred, ylab = "Ridership", xlab = "Time",
main = "Additive Trend and Additive Seasonality Model on Original
Data", flty = 2, bty="l", xaxt = "n")
# labels
axis(1, at = seq(1991, 2013, 1), labels = format(seq(1991, 2013, 1)))
# training data - forecasts
lines(maa.pred$fitted, lwd = 2, col = "darkslategray2")
# validation data only
lines(valid.ts)
# legend
legend(1991,2800000, c("Training and Validation Data","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("black", 'darkslategray2', 'blue'))
# estimates and parameters
maa
# Validation Data
nValid <- 12
# number of training data
nTrain <- length(df) - nValid
# time window for training data
train.ts <- window(df, start = c(1991, 1), end = c(1991, nTrain))
# time window for validation data
valid.ts <- window(df, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))
#automated selection - optimal model
optimal <- ets(train.ts, restrict = FALSE, allow.multiplicative.trend = TRUE)
optimal
# Optimal Forecasts
op.pred <- forecast(optimal, h = nValid, level = 0)
# training data - then validation forecasts
plot(op.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n",
main = "Optimal Model from Automated Model Selections", flty = 2)
# labels
axis(1, at = seq(1991, 2013, 1), labels = format(seq(1991, 2013, 1)))
# training data - forecasts
lines(op.pred$fitted, lwd = 2, col = "darkslategray2")
# validation data
lines(valid.ts)
# legend
legend(1991,2800000, c("Training and Validation Data","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("black", 'darkslategray2', 'blue'))
# Validation Data
nValid <- 12
# number of training data
nTrain <- length(df) - nValid
# time window for training data
train.ts <- window(df, start = c(1991, 1), end = c(1991, nTrain))
# time window for validation data
valid.ts <- window(df, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))
# trend of data
trend <- time(df)
# linear regression model
train.lm <- tslm(train.ts ~ trend)
# validation forecasts
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
# Plot training data along with validation forecasts
plot(train.lm.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", main = "Linear Regression
with Trend Model", flty = 2)
# labels
axis(1, at = seq(1991, 2013.9, 1), labels = format(seq(1991, 2013.9, 1)))
# validation data
lines(valid.ts)
# training model forecasts
lines(train.lm.pred$fitted, lwd = 2, col = "darkslategray2")
# legend
legend(1991,2800000, c("Training and Validation Data","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("black", 'darkslategray2', 'dodgerblue4'))
summary(train.lm)
print(paste0("AIC: ", round(AIC(train.lm),2)))
# Validation Data
nValid <- 12
# number of training data
nTrain <- length(df) - nValid
# time window for training data
train.ts <- window(df, start = c(1991, 1), end = c(1991, nTrain))
# time window for validation data
valid.ts <- window(df, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))
# trend of data
trend <- time(df)
# seasonality
season <- factor(cycle(df))
# linear model with linear trend, quadratic trend and seasonality
model.lm <- tslm(train.ts ~ trend + I(trend^2) +  season)
model.lm
# validation forecasts
model.lm.pred <- forecast(model.lm, h = nValid, level = 0)
# Plot training data along with validation forecasts
plot(model.lm.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Linear Regression with
Linear Trend, Quadratic Trend, and Seasonality Model")
# labels
axis(1, at = seq(1991, 2013.9, 1), labels = format(seq(1991, 2013.9, 1)))
# validation data
lines(valid.ts)
# training model forecasts
lines(model.lm.pred$fitted, lwd = 2, col = "darkslategray2")
# legend
legend(1991,2800000, c("Training and Validation Data","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("black", 'darkslategray2', 'dodgerblue4'))
# summary of model
summary(model.lm)
print(paste0("AIC: ", round(AIC(model.lm),2)))
accuracy(model.lm.pred, valid.ts)
# Validation Data
nValid <- 12
# number of training data
nTrain <- length(df) - nValid
# time window for training data
train.ts <- window(df, start = c(1991, 1), end = c(1991, nTrain))
# time window for validation data
valid.ts <- window(df, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))
#create basic AR model
ar1 = arima(train.ts, order=c(1,0,0))
ar1
#forecast ar1 model
ar1.pred <- forecast(ar1, h = nValid)
# Plot training data along with validation forecasts
plot(ar1.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "AR1 Model")
# labels
axis(1, at = seq(1991, 2013.9, 1), labels = format(seq(1991, 2013.9, 1)))
# validation data
lines(valid.ts)
# training model forecasts
lines(ar1.pred$fitted, lwd = 2, col = "darkslategray2")
# legend
legend(1991,2800000, c("Training and Validation Data","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("black", 'darkslategray2', 'dodgerblue4'))
#summary
summary(ar1)
#auto arima
# Validation Data
nValid <- 12
# number of training data
nTrain <- length(df) - nValid
# time window for training data
train.ts <- window(df, start = c(1991, 1), end = c(1991, nTrain))
# time window for validation data
valid.ts <- window(df, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))
# autoselection for optimal arima parameters
autoarima <- auto.arima(train.ts)
#forecast ar1 model
autoarima.pred <- forecast(autoarima, h = nValid)
# Plot training data along with validation forecasts
plot(autoarima.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Optimal ARIMA Model")
# labels
axis(1, at = seq(1991, 2013.9, 1), labels = format(seq(1991, 2013.9, 1)))
# validation data
lines(valid.ts)
# training model forecasts
lines(autoarima.pred$fitted, lwd = 2, col = "darkslategray2")
# legend
legend(1991,2800000, c("Training and Validation Data","Training Predictions",
"Validation Predictions"), lty=c(1,1,2),
lwd=c(1,2,2), bty = "n", col = c("black", 'darkslategray2', 'dodgerblue4'))
#summary
summary(autoarima)
# Seasonality naive forecasts
snaive.pred <- snaive(train.ts, h = nValid)
# Plot training data along with validation forecasts
plot(snaive.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Seasonality Naive Model")
# labels
axis(1, at = seq(1991, 2013.9, 1), labels = format(seq(1991, 2013.9, 1)))
# Optimal Exponential Model
op.df <- as.data.frame(accuracy(op.pred, valid.ts))
op.df[,1:6] %>%
pander(style = "grid", caption = "Optimal Exponential Model")
# Regression with Linear and Quadratic Trends, and Seasonality
model.lm.df <- as.data.frame(accuracy(model.lm.pred, valid.ts))
model.lm.df[,1:6] %>%
pander(style = "grid", caption = "Regression with Monthly Seasonality and Linear and Quadratic Trends Model")
#AR1 Model
ar1.df <- as.data.frame(accuracy(ar1.pred, valid.ts))
ar1.df[,1:6] %>%
pander(style = "grid", caption = "AR1 Model")
# Optimal ARIMA Model
autoarima.df <- as.data.frame(accuracy(autoarima.pred, valid.ts))
autoarima.df[,1:6] %>%
pander(style = "grid", caption = "Optimal ARIMA Model")
# Seasonality naive forecasts
snaive.df <- as.data.frame(accuracy(snaive.pred, valid.ts))
snaive.df[,1:6] %>%
pander(style = "grid", caption = "Seasonal Naive Model")
# the final model selected was the optimal exponential model
final_model <- optimal
#forecasts for June to August 2013 (3 months ahead)
final.pred <- forecast(final_model, h = nValid + 3)
# plot of predictions
plot(final.pred, ylab = "Ridership", xlab = "Time",
bty = "l", xaxt = "n", flty = 2,
main = "Final Model with Forecasts on Future Data")
# labels
axis(1, at = seq(1991, 2014, 1), labels = format(seq(1991, 2014, 1)))
# final forecasts for June to August 2013
final_forecasts<- as.data.frame(final.pred)[13:15,]
final_forecasts %>%
pander(style = "grid",
caption = "June to August 2013 - Ridership Forecasts")
